---------------------------------------------------------------------------
--     _____                  _         ______                           --
--    / ___/____  __  _______(_)____   / ____/___ _____ ___  ___  _____  --
--    \__ \/ __ \/ / / / ___/ / ___/  / / __/ __ `/ __ `__ \/ _ \/ ___/  --
--   ___/ / /_/ / /_/ / /  / / /__   / /_/ / /_/ / / / / / /  __(__  )   --
--  /____/ .___/\__, /_/  /_/\___/   \____/\__,_/_/ /_/ /_/\___/____/    --
--      /_/    /____/                                                    --
--                                                                       --
--  Â© 2021 Spyric Games Ltd.                  Last Updated: 24 June 2021 --
---------------------------------------------------------------------------
--  License: MIT                                                         --
---------------------------------------------------------------------------

--[[
	Spyric's Universally Unique Identifier (UUID) for Solar2D is similar to the
	standard UUID, but the identifiers that are generated by this plugin are of
	varying lengths and the identifiers consist of parts that require Solar2D
	API to work, so this approach cannot be directly copied to other Lua apps.
	
	Spyric Installation Identifier consists of three parts:

	1) Anonymized identifier.
		The first three numbers of the UUID are randomly generated based on
		the user's deviceID (obtained via system.getInfo("deviceID"). The
		first three characters of the deviceID are used as a seed for the
		random generator, which then generates 3 numbers between 1 and 9.

	2) Epoch (unix) time.
		Retrieved using socket.gettime() (or by using os.time() on builds
		that don't have access to sockets). With sockets, the epoch time
		will be fractional and the dot will be replaced by a hyphen (-)
		in the final UUID.
			
	3) Time to execution.
		How many milliseconds have passed between when this file was
		first required and when the UUID is generated.

		NB! For the best possible result, you should require this UUID
		plugin at the very start of your main.lua. That way, more time
		will pass before you create the UUID, which will result in a
		more random UUID. Requiring any plugins, modules or libraries,
		such as ad networks, Composer, Physics, etc. will each take at
		least some milliseconds or tens of milliseconds to complete.
		This, paired with the device identifier and epoch time, makes
		Spyric UUID more unique than most pure Lua UUID implementations.
	
	--------------------------------------------------------------------
	
	Sample UUID:
		266-1624567174-1922-28
	
		266 			= Anonymized identifier
		1624567174		= Epoch time, seconds
		1922			= Epoch time, milliseconds (available only with sockets)
		28				= Time to execution
	
	--------------------------------------------------------------------
	The only possible scenario where two identical UUIDs are created:
	1)	Two devices start the app at the same exact time, down to a
		millisecond on platforms/devices that support sockets, or down
		to a second on platforms/devices that do not support sockets.
	2)	The first three digits of these two aforementioned devices'
		deviceIDs are identical, or happen to produce the same three
		random numbers based on their random seed.
	3)	And finally, both of these devices also take exactly the same
		amount of time, down to a millisecond, between requiring this
		UUID plugin and creating the UUID string.
	In other words, the chances of UUIDs colliding are practically zero.
	--------------------------------------------------------------------
]]

---------------------------------------------------------------------------

local UUID = {}

local t = {  true, true, true }
local startTime = system.getTimer()*10

local platform, socket = system.getInfo( "platform" )

---------------------------------------------------------------------------
-- HTML5 implementation:

-- HTML5 builds don't include the socket library and using system.getInfo("deviceID")
-- returns an empty string, so using Spyric UUID on HTML5 platform isn't recommended.
if platform == "html5" then
	-- Create a new weak UUID (string) even on HTML5 platform, but show warning.
	function UUID.new()
		print( "WARNING: using Spyric UUID on HTML5 builds isn't recommended." )
		return "html5-" .. os.time() .. "-" .. (system.getTimer()*10 - startTime)
	end
	return UUID
end

---------------------------------------------------------------------------
-- All other platforms:

-- Sockets require the Internet, so check for INTERNET permission on Android.
if platform == "android" and system.getInfo( "environment" ) ~= "simulator" then
	local permissions = system.getInfo( "androidGrantedAppPermissions")
	if permissions then
		for i = 1, #permissions do
			if permissions[i] == "android.permission.INTERNET" then
				socket = require( "socket" )
				break
			end
		end
	end
else
	socket = require( "socket" )
end

-- Create a new UUID (string) and return it.
function UUID.new()
	local id, seed = system.getInfo( "deviceID" ):sub(1,3), ""
	for i = 1, 3 do
		seed = seed..string.byte(id:sub(i,i))
	end
	-- The maximum value of the seed can be 122122122, which is
	-- much less than 2^32 (4294967296), so the integer overflow
	-- issue in Lua 5.1 doesn't need to be addressed.
	math.randomseed( tonumber(seed) )
	
	t[1] = math.random(9) .. math.random(9) .. math.random(9)
	t[2] = socket and socket.gettime() or os.time()
	t[3] = system.getTimer()*10 - startTime
	local output = table.concat( t, "-" ):gsub("%.","-")
	return output
end

---------------------------------------------------------------------------

return UUID
