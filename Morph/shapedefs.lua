-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{


		["chicken"] = {




                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   52, 38  ,  68, 10  ,  72, 22  ,  72, 38  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   -16, -74  ,  -12, -78  ,  4, -78  ,  8, -74  ,  -12, -66  ,  -16, -66  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   48, 78  ,  20, 78  ,  20, 74  ,  28, 70  ,  40, 70  ,  48, 74  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   28, 70  ,  28, 50  ,  40, 50  ,  40, 70  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   16, 42  ,  64, -6  ,  52, 38  ,  28, 50  ,  24, 50  ,  16, 46  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   -20, 50  ,  -40, 50  ,  -48, 42  ,  -60, 10  ,  -12, 42  ,  -12, 46  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   -16, 78  ,  -44, 78  ,  -44, 74  ,  -36, 70  ,  -24, 70  ,  -16, 74  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   -36, 70  ,  -36, 50  ,  -24, 50  ,  -24, 70  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   8, -74  ,  12, -70  ,  12, -58  ,  -12, -58  ,  -12, -66  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   52, 38  ,  64, -6  ,  68, 10  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   44, 50  ,  28, 50  ,  52, 38  ,  52, 42  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   -12, 42  ,  -60, 10  ,  -60, -26  ,  -12, -58  ,  12, -58  ,  51, -38  ,  64, -6  ,  16, 42  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   64, -6  ,  51, -38  ,  60, -26  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   -12, -58  ,  -60, -26  ,  -52, -38  ,  -40, -50  ,  -24, -58  }
                    }
                     ,
                    {
                    pe_fixture_id = "body", density = 1, friction = 0.30000000000000004, bounce = 0.5,
                    filter = { categoryBits = 1, maskBits = 1, groupIndex = 0 },
                    shape = {   40, -50  ,  51, -38  ,  12, -58  ,  24, -58  }
                    }

                    
		}

	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end

	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end

	return physics;
end

return M
